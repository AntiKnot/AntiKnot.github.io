<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Writeup HackTheBox ScriptKiddle</title>
      <link href="/2021/04/27/Writeup-HackTheBox-ScriptKiddle/"/>
      <url>/2021/04/27/Writeup-HackTheBox-ScriptKiddle/</url>
      
        <content type="html"><![CDATA[<h1 id="Writeup-HackTheBox-ScriptKiddle"><a href="#Writeup-HackTheBox-ScriptKiddle" class="headerlink" title="Writeup HackTheBox ScriptKiddle"></a>Writeup HackTheBox ScriptKiddle</h1><p>under construction</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="if-you-cant-find-exploit"><a href="#if-you-cant-find-exploit" class="headerlink" title="if you cant find exploit"></a>if you cant find exploit</h3><p>if command, search result nothing.<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection</span><br></pre></td></tr></table></figure></p><p>download file into<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/metasploit-framework/m</span>odules<span class="regexp">/exploits/u</span>nix<span class="regexp">/fileformat/m</span>etasploit_msfvenom_apk_template_cmd_injection.rb</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection.rb" target="_blank" rel="noopener">github rapid7 metasploit_msfvenom_api_template_cmd_injection.rb</a></p><p>and run command in msf<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reload</span>_all</span><br></pre></td></tr></table></figure></p><h3 id="echo-redirect-into-file-with-permission-but-nothing-write-in-it"><a href="#echo-redirect-into-file-with-permission-but-nothing-write-in-it" class="headerlink" title="echo redirect into file with permission but nothing write in it."></a>echo redirect into file with permission but nothing write in it.</h3><p>search about <code>incorn</code></p><h3 id="shell-not-work"><a href="#shell-not-work" class="headerlink" title="shell not work"></a>shell not work</h3><p>Errors may occur at the same time, break down the steps, and verify one by one. You need to have an expectation before each step is executed, and observe side effects such as output. Try to run locally to find different places.</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>exploit-file<br><a href="https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection.rb" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection.rb</a><br>rapid7<br><a href="https://www.rapid7.com/db/modules/exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection/" target="_blank" rel="noopener">https://www.rapid7.com/db/modules/exploit/unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection/</a><br>exploit-db<br><a href="https://www.exploit-db.com/exploits/49491" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/49491</a><br>incorn<br><a href="https://www.geeksforgeeks.org/incron-command-in-linux-with-examples/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/incron-command-in-linux-with-examples/</a>    </p>]]></content>
      
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how-to-blog</title>
      <link href="/2020/04/06/how-to-blog/"/>
      <url>/2020/04/06/how-to-blog/</url>
      
        <content type="html"><![CDATA[<p>blog只要有一段时间没有更新就忘记整个流程。<br>blog在公网发布是需要接触github page的。而生成可发布的文件需要hexo这个工具。<br>所以我开了两个项目一个public项目[2]用于展示blog，一个private项目[1]用于保存hexo文件。<br>当想不起来如何使用hexo的时候就去官网看下文档关于写作和发布的部分。[3]</p><p>reference<br>[1] github hexo <a href="https://github.com/SailerNote/hexo_blog" target="_blank" rel="noopener">https://github.com/SailerNote/hexo_blog</a><br>[2] github page <a href="https://github.com/SailerNote/sailernote.github.io" target="_blank" rel="noopener">https://github.com/SailerNote/sailernote.github.io</a><br>[3] hexo docs   <a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>crontab_tool</title>
      <link href="/2019/08/02/crontab-tool/"/>
      <url>/2019/08/02/crontab-tool/</url>
      
        <content type="html"><![CDATA[<p>crontab 计时任务语法工具<br>summary: 会根据填写的命令，给出语意化的说明和下次触发的标准时间。<br>link: <a href="https://crontab.guru/#52_0-23_*_*_" target="_blank" rel="noopener">https://crontab.guru/#52_0-23_*_*_</a>*</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过 storm ssh 连接 vps</title>
      <link href="/2019/03/15/%E9%80%9A%E8%BF%87%20storm%20ssh%20%E8%BF%9E%E6%8E%A5%20vps/"/>
      <url>/2019/03/15/%E9%80%9A%E8%BF%87%20storm%20ssh%20%E8%BF%9E%E6%8E%A5%20vps/</url>
      
        <content type="html"><![CDATA[<h1 id="通过-storm-ssh-连接-vps"><a href="#通过-storm-ssh-连接-vps" class="headerlink" title="通过 storm ssh 连接 vps"></a>通过 storm ssh 连接 vps</h1><p>Vultr 创建一个 VPS 实例。在server管理页面获取刚新建的VPS username password ip_address。</p><p>stormssh 文档 <a href="https://stormssh.readthedocs.io/en/master/index.html" target="_blank" rel="noopener">https://stormssh.readthedocs.io/en/master/index.html</a></p><p>install storms<br><code>[sudo] pip install stromssh</code></p><p>create stormssh item<br><code>storm add vpsname username@ip_address:port</code><br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">success  </span>vps added to your ssh config. you can connect it by typing "ssh vps".</span><br></pre></td></tr></table></figure></p><p>list vps<br><code>storm list</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SailerNote<span class="meta">@computer</span>  ~/.ssh  storm list </span><br><span class="line">Listing <span class="string">entries:</span></span><br><span class="line">vpsname -&gt; username<span class="meta">@ip</span><span class="string">_address:</span>port</span><br></pre></td></tr></table></figure></p><p>create ssh public and private key<br>format<br><code>ssh-keygen -f path -t [rsa] -C string</code><br>example<br><code>ssh-keygen -f ~/.ssh/id_rsa.vpsname -t rsa -C &quot;test@email.com&quot;</code></p><p>copy public key to vps<br>format<br><code>ssh-copy-id [-i [identity_file]] [user@]machine</code><br>example<br><code>ssh-copy-id -i ~/.ssh/id_rsa.vpsname.pub username@ip_address</code><br><code>ssh-copy-id -i ~/.ssh/id_rsa.vpsname.pub vpsname</code><br>this step need password</p><p>ssh config<br>before<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host vpsname</span><br><span class="line">    hostname 1.1.1.1</span><br><span class="line">   <span class="built_in"> user </span>username</span><br><span class="line">   <span class="built_in"> port </span>22</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host vpsname</span><br><span class="line">    identityfile /Users/SailerNote/.ssh/id_rsa.vpsname</span><br><span class="line">   <span class="built_in"> user </span>root</span><br><span class="line">    usekeychain <span class="literal">yes</span></span><br><span class="line">    preferredauthentications publickey</span><br><span class="line">    hostname 1.1.1.1</span><br><span class="line">   <span class="built_in"> port </span>22</span><br><span class="line">    addkeystoagent <span class="literal">yes</span></span><br></pre></td></tr></table></figure></p><p>connect vps<br><code>ssh vpsname</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/15/hello-world/"/>
      <url>/2019/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>This is My Blog, Welcome.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mongo数据备份</title>
      <link href="/2019/03/15/Mongo%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/"/>
      <url>/2019/03/15/Mongo%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="Mongo数据备份"><a href="#Mongo数据备份" class="headerlink" title="Mongo数据备份"></a>Mongo数据备份</h1><p>mongodb+rsync+crontab</p><h2 id="获取需要备份文件-mongodb"><a href="#获取需要备份文件-mongodb" class="headerlink" title="获取需要备份文件 mongodb"></a>获取需要备份文件 mongodb</h2><p>项目中需要备份的文件有两种，</p><ol><li>mongo的数据</li><li>docs下的excel和word文件</li></ol><p>mongo原生的三个命令可以从数据库中导出数据文件，导入数据文件，以及通过文件对数据库进行表级字段级操作。</p><p>（以下只涉及到备份预案）</p><p>常用的mongo数据库导出<br><code>mongodump -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -o 文件存在路径</code></p><p>不需要展开的文件目录，mongo提供了导出压缩文件的命令，每天备份一次，文件名使用日期-时间戳-数据库.archive的形式，–archive和-o不兼容，只能同时使用一个命令。<br>获取时间戳<br><code>HOD=$(date +%s)</code><br>获取yyyyMMdd格式日期<br><code>TODAY=$(date +%Y%m%d)</code><br>导出存档文件<br><code>mongodump -h &quot;$DB_HOST&quot;  --port &quot;$DB_PORT&quot; -d &quot;$DB_NAME&quot; --gzip  --archive=&quot;$ARCHIVE&quot;</code></p><h2 id="推送到备份服务器-rsync"><a href="#推送到备份服务器-rsync" class="headerlink" title="推送到备份服务器 rsync"></a>推送到备份服务器 rsync</h2><p>rsync具有ssh和daemon两种服务模式，两种又可以进行推||拉两种同步方式。（我个人直觉上比较喜欢资源服务器搭建好后，自由拉取。或者由一个中心服务器控制文件流动的，而不是资源服务器自动推。所以使用了daemon和pull的模式，因为拉取在备份服务器上运行脚本，是否成功获取也很容易通过一些脚本处理。）<br>daemon的主要配置在rsyncd.conf文件中<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pid file = /var/run/rsyncd.pid <span class="comment"># The process id file the daemon uses.</span></span><br><span class="line">lock file = /var/run/rsync.lock <span class="comment"># The daemon lock file.</span></span><br><span class="line">log file = /var/log/rsync.log <span class="comment"># The location of the log file.</span></span><br><span class="line">port = 12000</span><br><span class="line"></span><br><span class="line"><span class="comment"># [files] This is the module name. </span></span><br><span class="line"><span class="comment"># The name used here is what you’ll be putting in the rsync pull command as the first part of the source (/files/../..). </span></span><br><span class="line"><span class="comment"># You can name it what you’d like and can have as many as you’d like.</span></span><br><span class="line">[files] </span><br><span class="line">path = /home/data/files <span class="comment"># The file path for files associated with this module.</span></span><br><span class="line">comment = RSYNC FILES <span class="comment"># Descriptive comment for this module.</span></span><br><span class="line">read only = no <span class="comment"># This tells the daemon the directory for this module is read-only. You cannot upload to it. For upload only, use upload only = true.</span></span><br><span class="line">write only = no</span><br><span class="line">list = yes</span><br><span class="line"><span class="comment"># 24标志c类网段</span></span><br><span class="line">hosts allow = ipaddr/24</span><br><span class="line">timeout = 300 <span class="comment"># Time, in seconds, the rsync daemon will wait before terminating a dead conenction.</span></span><br><span class="line"></span><br><span class="line">[mongo]</span><br><span class="line">path = /home/data/mongo</span><br><span class="line">comment = MONGODB BACKUP</span><br><span class="line">read only = no</span><br><span class="line">write only = no</span><br><span class="line">list = yes</span><br><span class="line"><span class="comment"># ipaddr like 127.0.0.1</span></span><br><span class="line">hosts allow = ipaddr/24 ipaddr/24</span><br><span class="line">timeout = 300</span><br><span class="line"></span><br><span class="line">[docs]</span><br><span class="line">path = /home/static/docs</span><br><span class="line">comment = DOCS BACKUP</span><br><span class="line">read only = no</span><br><span class="line">write only = no</span><br><span class="line">list = yes</span><br><span class="line">hosts allow = ipaddr/24 ipaddr/24</span><br><span class="line">timeout = 300</span><br></pre></td></tr></table></figure></p><p>启动<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync <span class="comment">--daemon</span></span><br></pre></td></tr></table></figure></p><p>检查启动情况<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> <span class="keyword">x</span> | <span class="keyword">grep</span> rsync</span><br></pre></td></tr></table></figure></p><p>停止daemon<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill `<span class="keyword">cat</span> /<span class="keyword">var</span>/<span class="keyword">run</span>/rsyncd.pid`</span><br></pre></td></tr></table></figure></p><p>通过xinetd守护进程</p><p>备份服务器拉取数据<br>查看rsync服务器中可以同步的目录列表<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -rdt <span class="string">rsync:</span><span class="comment">//IPADDR:RsyncPort/</span></span><br></pre></td></tr></table></figure></p><p>可以反复执行拿到下级目录<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -rdt <span class="string">rsync:</span><span class="comment">//IPADDR:RsyncPort/DirectoryName</span></span><br></pre></td></tr></table></figure></p><p>找到资源后 同步到目标路径<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -rdt rsync:<span class="regexp">//</span>IPADDR:RsyncPort<span class="regexp">/DirectoryName/</span>File <span class="regexp">/DestinationDirectory/</span></span><br></pre></td></tr></table></figure></p><p>MacOS因为是NFS的数据格式，同步的时候需要使用 -O参数，SRC为资源路径 DEST为目标路径，-avu， -rdt同步中的细节调整，详看文档<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">RSYNC_SERVER=rsync://127.0.0.1:12000</span><br><span class="line">RSYNC_DIR=files</span><br><span class="line">RSYNC_SRC=<span class="string">"<span class="variable">$RSYNC_SERVER</span>"</span>/<span class="string">"<span class="variable">$RSYNC_DIR</span>"</span></span><br><span class="line">RSYNC_DEST=<span class="string">"/data/server_back"</span></span><br><span class="line">sudo rsync -avu -O --progress <span class="string">"<span class="variable">$RSYNC_SRC</span>"</span> <span class="string">"<span class="variable">$RSYNC_DEST</span>"</span></span><br></pre></td></tr></table></figure></p><h2 id="定时执行获取-amp-amp-推送操作-crontab"><a href="#定时执行获取-amp-amp-推送操作-crontab" class="headerlink" title="定时执行获取&amp;&amp;推送操作 crontab"></a>定时执行获取&amp;&amp;推送操作 crontab</h2><p>crontab是系统级的定时任务<br><code>crontab -e</code> 编辑定时任务<br><code>crontab -l</code> 查看定时任务列表<br>保存后系统就会按照crontab执行计划任务<br>crontab 除了执行shell外还行执行其他脚本<br><code>*/1 * * * * /usr/bin/python /root/images/color.py</code> 如可以执行python解释器来执行python脚本，改脚本为执行color.py/1 minute</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>Destination host unreachable <a href="https://blog.csdn.net/yzit0905/article/details/52748122" target="_blank" rel="noopener">https://blog.csdn.net/yzit0905/article/details/52748122</a></p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>知乎上关于mongodb backup的文章<br><a href="https://zhuanlan.zhihu.com/p/29809036" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29809036</a></p><p>github上自动备份mongo的脚本<br><a href="https://github.com/micahwedemeyer/automongobackup/blob/master/src/automongobackup.sh" target="_blank" rel="noopener">https://github.com/micahwedemeyer/automongobackup/blob/master/src/automongobackup.sh</a></p><p>mongodb压缩，过去需要额外执行压缩命令，3.2引入了–gzip<br><a href="https://www.cnblogs.com/xuliuzai/p/9594138.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuliuzai/p/9594138.html</a></p><p>mongo官方文章，存档与压缩<br><a href="https://www.mongodb.com/blog/post/archiving-and-compression-in-mongodb-tools" target="_blank" rel="noopener">https://www.mongodb.com/blog/post/archiving-and-compression-in-mongodb-tools</a></p><p>来自linux公社，rsync实现文件同步配置与使用<br><a href="https://www.linuxidc.com/Linux/2012-10/71704.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2012-10/71704.htm</a></p><p>来自linux公社，rsync实现文件同步配置排除故障<br><a href="https://www.linuxidc.com/Linux/2012-10/71705.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2012-10/71705.htm</a></p><p>! rsync 使用详解<br><a href="https://www.atlantic.net/hipaa-compliant-cloud-storage/how-to-setup-rsync-daemon-linux-server/" target="_blank" rel="noopener">https://www.atlantic.net/hipaa-compliant-cloud-storage/how-to-setup-rsync-daemon-linux-server/</a></p><p>rsync 使用详解 相当于上一片的中文版<br><a href="https://segmentfault.com/a/1190000000444614" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000444614</a><br>wiki关于xinted文章<br><a href="https://en.wikipedia.org/wiki/Xinetd" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Xinetd</a></p><p>20个crontab的用例,常见写法与基本命令<br><a href="https://www.jianshu.com/p/d93e2b177814" target="_blank" rel="noopener">https://www.jianshu.com/p/d93e2b177814</a></p><p>crontab语法辅助工具<br><a href="https://crontab.guru/#52_0-23_*_*_*" target="_blank" rel="noopener">https://crontab.guru/#52_0-23_*_*_*</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码动态演示工具</title>
      <link href="/2018/11/08/%E4%BB%A3%E7%A0%81%E5%8A%A8%E6%80%81%E6%BC%94%E7%A4%BA%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/11/08/%E4%BB%A3%E7%A0%81%E5%8A%A8%E6%80%81%E6%BC%94%E7%A4%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>代码动态演示工具，对命令行逐行表现力很好。<br><a href="https://glorious.codes/demo" target="_blank" rel="noopener">https://glorious.codes/demo</a></p><p>早一年我还很倾向使用样式结构简单的系统，因为可以照顾到性能低的设备和一些兼容性不好的浏览器。<br>但是后来看到华盛顿邮报等网站的图表后，开始反思，图表动画的信息量更大，具有文字不具有的表现力。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
