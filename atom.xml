<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SailerNote</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sailernote.github.io/"/>
  <updated>2019-08-02T10:00:23.510Z</updated>
  <id>https://sailernote.github.io/</id>
  
  <author>
    <name>Yansy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>crontab_tool</title>
    <link href="https://sailernote.github.io/2019/08/02/crontab-tool/"/>
    <id>https://sailernote.github.io/2019/08/02/crontab-tool/</id>
    <published>2019-08-02T09:57:58.000Z</published>
    <updated>2019-08-02T10:00:23.510Z</updated>
    
    <content type="html"><![CDATA[<p>crontab 计时任务语法工具<br>summary: 会根据填写的命令，给出语意化的说明和下次触发的标准时间。<br>link: <a href="https://crontab.guru/#52_0-23_*_*_" target="_blank" rel="noopener">https://crontab.guru/#52_0-23_*_*_</a>*</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;crontab 计时任务语法工具&lt;br&gt;summary: 会根据填写的命令，给出语意化的说明和下次触发的标准时间。&lt;br&gt;link: &lt;a href=&quot;https://crontab.guru/#52_0-23_*_*_&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过 storm ssh 连接 vps</title>
    <link href="https://sailernote.github.io/2019/03/15/%E9%80%9A%E8%BF%87%20storm%20ssh%20%E8%BF%9E%E6%8E%A5%20vps/"/>
    <id>https://sailernote.github.io/2019/03/15/通过 storm ssh 连接 vps/</id>
    <published>2019-03-15T06:31:34.042Z</published>
    <updated>2019-03-15T06:31:34.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过-storm-ssh-连接-vps"><a href="#通过-storm-ssh-连接-vps" class="headerlink" title="通过 storm ssh 连接 vps"></a>通过 storm ssh 连接 vps</h1><p>Vultr 创建一个 VPS 实例。在server管理页面获取刚新建的VPS username password ip_address。</p><p>stormssh 文档 <a href="https://stormssh.readthedocs.io/en/master/index.html" target="_blank" rel="noopener">https://stormssh.readthedocs.io/en/master/index.html</a></p><p>install storms<br><code>[sudo] pip install stromssh</code></p><p>create stormssh item<br><code>storm add vpsname username@ip_address:port</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">success  vps added to your ssh config. you can connect it by typing &quot;ssh vps&quot;.</span><br></pre></td></tr></table></figure></p><p>list vps<br><code>storm list</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SailerNote@computer  ~/.ssh  storm list </span><br><span class="line">Listing entries:</span><br><span class="line">vpsname -&gt; username@ip_address:port</span><br></pre></td></tr></table></figure></p><p>create ssh public and private key<br>format<br><code>ssh-keygen -f path -t [rsa] -C string</code><br>example<br><code>ssh-keygen -f ~/.ssh/id_rsa.vpsname -t rsa -C &quot;test@email.com&quot;</code></p><p>copy public key to vps<br>format<br><code>ssh-copy-id [-i [identity_file]] [user@]machine</code><br>example<br><code>ssh-copy-id -i ~/.ssh/id_rsa.vpsname.pub username@ip_address</code><br><code>ssh-copy-id -i ~/.ssh/id_rsa.vpsname.pub vpsname</code><br>this step need password</p><p>ssh config<br>before<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host vpsname</span><br><span class="line">    hostname 1.1.1.1</span><br><span class="line">    user username</span><br><span class="line">    port 22</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host vpsname</span><br><span class="line">    identityfile /Users/SailerNote/.ssh/id_rsa.vpsname</span><br><span class="line">    user root</span><br><span class="line">    usekeychain yes</span><br><span class="line">    preferredauthentications publickey</span><br><span class="line">    hostname 1.1.1.1</span><br><span class="line">    port 22</span><br><span class="line">    addkeystoagent yes</span><br></pre></td></tr></table></figure></p><p>connect vps<br><code>ssh vpsname</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;通过-storm-ssh-连接-vps&quot;&gt;&lt;a href=&quot;#通过-storm-ssh-连接-vps&quot; class=&quot;headerlink&quot; title=&quot;通过 storm ssh 连接 vps&quot;&gt;&lt;/a&gt;通过 storm ssh 连接 vps&lt;/h1&gt;&lt;p&gt;Vu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习摘要 像素的一生 Life of Pixel</title>
    <link href="https://sailernote.github.io/2019/03/15/%E5%AD%A6%E4%B9%A0%E6%91%98%E8%A6%81%20%E5%83%8F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%94%9F%20Life%20of%20Pixel/"/>
    <id>https://sailernote.github.io/2019/03/15/学习摘要 像素的一生 Life of Pixel/</id>
    <published>2019-03-15T06:31:34.042Z</published>
    <updated>2019-03-15T06:31:34.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="像素的一生-Life-of-Pixel"><a href="#像素的一生-Life-of-Pixel" class="headerlink" title="像素的一生 Life of Pixel"></a>像素的一生 Life of Pixel</h1><hr><p>视频链接 <a href="https://www.youtube.com/watch?v=NCUDntd-3ao&amp;feature=youtu.be" target="_blank" rel="noopener">https://www.youtube.com/watch?v=NCUDntd-3ao&amp;feature=youtu.be</a><br>PPT链接 <a href="https://bit.ly/lifeofapixel" target="_blank" rel="noopener">https://bit.ly/lifeofapixel</a></p><p><em>从webContent到屏幕显示像素经理了多种间接/异步操作，屏幕并不是在放置元素，而是排队等待延迟操作……</em></p><p><em>渲染发生在sandbox沙箱进程中，Blink是Content层下面渲染器过程中代码的子集，使用底层操作系统提供的图形库，OpenGL （windows需要DirectX），将来还会出现Vulkan，这些提供了纹理着色器。</em></p><p>goals：</p><ul><li>WebContent(HTML CSS JS) -&gt; OpenGL调用<br>有效的中间数据结构更有利于做渲染更新，并相应来自脚本和系统其他部分的查询。</li><li>HTML ：Hyper </li><li>CSS：p{color:red} p:selceter color:attribute red:property</li><li>JS:<blockquote><p>To summarize, attributes support tools that operate on your code, but properties define the state of an object and there is no logical comparison between the two.<br>总的来说，attribute支撑了你程序中的的各个部分运行，而Properties定义了你的对象的状态，两者之间没有逻辑关系<br>stages：lifecycle<br>content-&gt;stage-&gt;[intermediate data structures]-&gt;stage-&gt;[intermediate data structures]-&gt;stage-&gt;pixels</p></blockquote></li></ul><p>parsing: DOM style</p><ul><li>blink在渲染进程中第一个获取的资源通常是HTML</li><li>blink(接收HTML标签与文本组成的流):HTMLDocumentParser HTML文本解析器,HTML标签给文档赋予了语义上的层级结构</li><li>生成反映改结构的对象模型，既DOM：Document Object Model</li><li>DOM 一作为页面的内部表示Chrome’s internal representation，二是将查询(querying)和修改(modifying)的API暴露(exposes)给JS,Te API exposed to JavaScript</li><li>V8 JavaScript engine exposes DOM web APIs，将真实DOM树做一层简单的包装后暴露为DOM Web APIs</li><li>CSS具有selects,attribute,property 有些时候property和attribute会混用 选择器选择器属性声所作用于的DOM节点的子集。</li><li>规则下样式之间会存在冲突 selectors can be complex, declarations may conflict.</li><li>样式规则被以各种方式索引进行用于有效查找，实现各个样式属性的C++类，在构建时由Python脚本自动生成； </li><li>样式作用于DOM元素，样式分析或样式重算，最终存储在ComputedStyle（计算样式）对象模型中。样式属性于值的超大map</li></ul><p>layout:</p><ul><li>flowing，block flow，按照DOM中的顺序</li><li>overflow， 溢出，需要滚动显示</li><li>float，浮动，表格会占用多行，内容会环绕文本显示</li><li>DOM tree，layout tree，C++ class hierarchy</li><li>DOM节点于布局对象通常一一对应</li><li>布局阶段 遍历整个布局树， </li></ul><p>paint:</p><ul><li>DiaplayItem 记录绘画过程，实际展示过程会重放这些过程</li><li>z-index 图层堆叠顺序</li><li>backgrounds-&gt;floats-&gt;foregrounds-&gt;outlines</li></ul><p>raster:栅格化 rasterization</p><ul><li>将列表中的全部或者部分带显示项转化为颜色值的位图(red,green,blue,alpha)四通道色值，</li><li>栅格位图保存在内存，又OpenGL纹理对象。</li><li>快速栅格化，GPU栅格化，引用GPU内存。保存输出的位图；执行生成位图；</li><li>通过SKIA库生成OpenGL调用，SKIA提供了硬件的抽象</li></ul><p>gpu：</p><ul><li>SKIA不能直接调用OpenGL，渲染进程在沙箱中进行，不能直接进行系统调用。</li><li>在渲染器中SKIA产生OpenGL调用，通过命令缓冲区机制，代理传输到GPU进程，GPU进程接收命令缓冲，通过GL API对象的一组函数指针生成真正的GL调用。</li><li>在windows系统中ANGLE把OpenGL翻译成DirectX</li></ul><p>渲染不是静态的，浏览会话browing session中会发生各种情况。执行完整的渲染流程代价太大(expensive)。<br>“Change is good. Yeah, but it’s not easy.”—-《The Lion King》</p><ul><li>scrolling</li><li>zooming</li><li>animations</li><li>incremental loading</li><li>JavaScript</li><li>…</li></ul><p>frames: 帧</p><ul><li>60frames/s 黄金准则，典型硬件上的垂直同步间隔。</li></ul><p>invalidation：失效</p><ul><li>优化方案之一，跟踪容易发生改变的部分，复用无变化的部分。</li><li>管道流程精细化失效 pipeline stage granular invalidation，某节点需要在下一帧重新计算布局，下一帧将只变更布局被标记为需要变更的节点。</li></ul><p>jank:</p><ul><li>主线程上的所有运行都会于js竞争，main thread competes with JavaScript.因为DOM存在于主线程，流程管道中与DOM交互的任何东西都存在于主线程。</li></ul><p>enter:compositing</p><ul><li>优化方案之二，合成两个基础，一个是将页面分解成多个图层layers，图层在单独的线程上进行合成，<strong>laters in Developer Tools</strong>图层分层可视化工具。Scrolling滚动/动态动作都可以通过图层表示<br>layer moves/clips/scales</li></ul><p>later tree:</p><ul><li>图层也是树的结构</li><li>合成在cc中进行，chromium compositer</li><li>如果一个布局对象没有图层会绘制到最近的父图层</li><li>可以认为是图层捕获了DOM的子树</li><li>注意，从Paint图层树到CC图层树的中间环节，Paint图层是等待分层的候选对象，重要但是不足以让一个元素获得专属的CC图层；在溢出滚动scroll中，滚动条是一个图层，两个滚动条之间的夹角也是一个图层。图层受到合成图层映射对象的管理。这个映射对象属于Paint层。</li></ul><p>compositing update:</p><ul><li>图层树，以及渲染流程中管道是如何工作的。</li><li>在layout-&gt;paint之间加入了 compositing update layout-&gt;compositing update-&gt;paint</li><li>paint进行Graphicslayer:Paint中，进行了分层与合成 CC:Layer(此阶段属于另一个声明周期，合成更新阶段，发生在主线程布局阶段之后，绘制阶段之前，每个图层被单独绘制)每个图层都有自己的带显示列表</li><li>合成更新和绘制阶段会操作被成为图形图层的对象，图形图层知识对CC图层对象的一层包装，可以认为图形图层和CC图层是可以互相替换的。</li><li>（UNDERconstruction Google将来计划将创建图层的工作放到绘制阶段之后，可以进行更细粒度的合成决策，二是让合成操作尽可能不以来绘制的顺序和其他东西）</li></ul><p>commit:提交过程</p><ul><li>更新合成线程上的图层树的副本，匹配主线程上的图层树的状态</li><li>主线程阻塞时，提交过程运行在合成先层上（线程状态同步 这是什么东西）</li></ul><p>tiling:合成阶段栅格</p><ul><li>栅格是在绘制阶段之后的步骤，目的是为了把绘制操作的对象转化成位图</li><li>合成线程将图层划分成图块，图块是栅格操作的基本单位，在栅格线程池中被栅格化</li><li>合成线程有一个图块叫做图块管理器的对象，根据他们与视口的距离来创建图块，在工作池上安排栅格任务</li><li>不同分辨率图层的分块策略不同</li></ul><p>drawing: </p><ul><li>图块就绪，合成线程生成“四边形（Quad）”绘线</li><li>一个Quard像是在屏幕上的特定位置绘制图块的指令，</li><li>提交到浏览器进程</li></ul><p>activation:</p><ul><li>但是当一边绘制一边提交的时候，情况会变得复杂。解决，在实现线程上增加树的两个副本，待执树接收任务提交</li><li>active tree 执行绘制，逐个执行</li><li>pending tree 进行栅格化</li><li>pending tree 完成栅格化后激活复制到active tree</li></ul><p>display(viz): 显示合成器</p><ul><li>浏览器运行显示合成器</li><li>这和渲染合成不一样，这个组件位于一个叫“视觉”的服务中，viz :short for visuals</li><li>最终聚合的合成帧来自渲染器和WebContent之外的浏览器UI，调用OpenGL绘制GPU进程中的quad资源</li><li>栅格过程中的GL调用一样，使用合成输出双缓冲double buffered，quad在后台缓冲器绘制，再使用swap命令让它变为可见</li></ul><p>review: 总结<br>main</p><hr><p>blink 为了实现web平台化的目标，代码所有权界限不严格</p><ul><li>content: WebContent</li><li>DOM: Build DOM tree 构建DOM树</li><li>style: resolved styles 解决样式问题</li><li>layout: updated layout 更新布局</li><li>composting updat: created compositing layers 生成合成图层</li><li>paint: painted the layers into display item lists 把图层绘制到带显示列表中</li></ul><hr><p>impl</p><hr><ul><li>commit: committed the layer tree to the compositor thread 把图层树提交给合成线程</li><li>tiling: broken the laters into tiles 把图层切分为小图块</li><li>raster: raster the tiles on worker threads 在工作线程对图块做栅格操作</li><li>activate: copied the pending tree to the active tree 把待执行树复制到激活树中</li><li>draw: drawn the tree into quads把树绘制成quad，submmted the quard to the browser process 提交quad到浏览器进程</li></ul><hr><p>browser process </p><ul><li>display: displayed them as pixels on the screen 屏幕上用像素显示</li></ul><p>GPU process</p><ul><li>—-: raser&amp;display display run GL through the GPU process 栅格和显示过程通过GPU进程调用GL</li></ul><hr><p>busy</p><ul><li>主线程繁忙可在合成线程上更新图层</li></ul><hr><p>end<br>很多复杂性都源自于对当时情况有意义，以及改进和设计策略，今天未必有意义。</p><hr><p>-EOF-</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;像素的一生-Life-of-Pixel&quot;&gt;&lt;a href=&quot;#像素的一生-Life-of-Pixel&quot; class=&quot;headerlink&quot; title=&quot;像素的一生 Life of Pixel&quot;&gt;&lt;/a&gt;像素的一生 Life of Pixel&lt;/h1&gt;&lt;hr&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基础技术栈</title>
    <link href="https://sailernote.github.io/2019/03/15/%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    <id>https://sailernote.github.io/2019/03/15/基础技术栈/</id>
    <published>2019-03-15T06:31:34.041Z</published>
    <updated>2019-03-15T06:31:34.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础技术栈"><a href="#基础技术栈" class="headerlink" title="基础技术栈"></a>基础技术栈</h1><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p>Python <a href="https://www.coursera.org/learn/hipython" target="_blank" rel="noopener">https://www.coursera.org/learn/hipython</a><br>涉及requests,numpy,pandas</p><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><p>Python <a href="https://zh-google-styleguide.readthedocs.io/en/latest/contents/" target="_blank" rel="noopener">https://zh-google-styleguide.readthedocs.io/en/latest/contents/</a></p><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><p>Python正则 <a href="https://pymotw.com/3//re/index.html" target="_blank" rel="noopener">https://pymotw.com/3//re/index.html</a><br>可视化正则工具 <a href="https://regexper.com/" target="_blank" rel="noopener">https://regexper.com/</a></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Mongo <a href="https://www.coursera.org/learn/introduction-mongodb" target="_blank" rel="noopener">https://www.coursera.org/learn/introduction-mongodb</a><br>Mongo操作数据库的基本语法</p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>MySQL <a href="https://www.imooc.com/learn/117" target="_blank" rel="noopener">https://www.imooc.com/learn/117</a><br>因为我们用的是NoSQL，所以只是了解一下表设计的流程</p><h3 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h3><p>JS HTML CSS <a href="https://www.coursera.org/learn/duke-programming-web" target="_blank" rel="noopener">https://www.coursera.org/learn/duke-programming-web</a><br><del>VUE(framework) + Element(UI) + Axios(httpRequest) 数据展示项目</del><br><del>VUE-router <a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></del><br><del>TypeScript <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">https://www.typescriptlang.org/</a></del></p><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>web socket</p><h3 id="后端框架"><a href="#后端框架" class="headerlink" title="后端框架"></a>后端框架</h3><p>Flask/Tornado/Django<br>Django <a href="https://simpleisbetterthancomplex.com/" target="_blank" rel="noopener">https://simpleisbetterthancomplex.com/</a><br>DRF <a href="https://www.django-rest-framework.org/" target="_blank" rel="noopener">https://www.django-rest-framework.org/</a><br>django-extensions <a href="https://github.com/django-extensions/django-extensions" target="_blank" rel="noopener">https://github.com/django-extensions/django-extensions</a></p><h3 id="API-开发工具"><a href="#API-开发工具" class="headerlink" title="API 开发工具"></a>API 开发工具</h3><p>Postman <a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a></p><h3 id="API-规范"><a href="#API-规范" class="headerlink" title="API 规范"></a><del>API 规范</del></h3><p><del>检查表 <a href="https://devchecklists.com/python-api-checklist/" target="_blank" rel="noopener">https://devchecklists.com/python-api-checklist/</a></del></p><h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a><del>压力测试</del></h3><p><del>测试工具 <a href="https://github.com/locustio/locust" target="_blank" rel="noopener">https://github.com/locustio/locust</a></del></p><h3 id="HTTP抓包与调试"><a href="#HTTP抓包与调试" class="headerlink" title="HTTP抓包与调试"></a>HTTP抓包与调试</h3><p>Fiddler <a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener">https://www.telerik.com/fiddler</a><br>Chrome / Firefox</p><h3 id="文档编写"><a href="#文档编写" class="headerlink" title="文档编写"></a>文档编写</h3><p>Markdown <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Markdown</a></p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>手册 <a href="http://rogerdudler.github.io/git-guide/" target="_blank" rel="noopener">http://rogerdudler.github.io/git-guide/</a><br>流程 <a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noopener">https://guides.github.com/introduction/flow/</a><br>分支规则 <a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">http://nvie.com/posts/a-successful-git-branching-model/</a><br>工具 <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">https://www.sourcetreeapp.com/</a></p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a><del>容器</del></h3><p><del>Docker <a href="https://docs.docker.com/" target="_blank" rel="noopener">https://docs.docker.com/</a></del></p><h3 id="虚拟开发环境"><a href="#虚拟开发环境" class="headerlink" title="虚拟开发环境"></a><del>虚拟开发环境</del></h3><p><del>Vagrant <a href="https://www.vagrantup.com/" target="_blank" rel="noopener">https://www.vagrantup.com/</a></del></p><h3 id="部署运维"><a href="#部署运维" class="headerlink" title="部署运维"></a><del>部署运维</del></h3><p><del>k8s <a href="https://www.coursera.org/learn/google-kubernetes-engine" target="_blank" rel="noopener">https://www.coursera.org/learn/google-kubernetes-engine</a></del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础技术栈&quot;&gt;&lt;a href=&quot;#基础技术栈&quot; class=&quot;headerlink&quot; title=&quot;基础技术栈&quot;&gt;&lt;/a&gt;基础技术栈&lt;/h1&gt;&lt;h3 id=&quot;编程语言&quot;&gt;&lt;a href=&quot;#编程语言&quot; class=&quot;headerlink&quot; title=&quot;编程语言&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ubuntu查看自己的外网IP</title>
    <link href="https://sailernote.github.io/2019/03/15/ubuntu%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%96%E7%BD%91IP/"/>
    <id>https://sailernote.github.io/2019/03/15/ubuntu查看自己的外网IP/</id>
    <published>2019-03-15T06:31:34.040Z</published>
    <updated>2019-03-15T06:31:34.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu查看自己的外网IP"><a href="#ubuntu查看自己的外网IP" class="headerlink" title="ubuntu查看自己的外网IP"></a>ubuntu查看自己的外网IP</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install curl</span><br><span class="line">curl ifconfig.me</span><br></pre></td></tr></table></figure><p><a href="https://ifconfig.me/" target="_blank" rel="noopener">https://ifconfig.me/</a> 是一个查看自身IP Address的站点，还提供了xml和json的响应格式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ubuntu查看自己的外网IP&quot;&gt;&lt;a href=&quot;#ubuntu查看自己的外网IP&quot; class=&quot;headerlink&quot; title=&quot;ubuntu查看自己的外网IP&quot;&gt;&lt;/a&gt;ubuntu查看自己的外网IP&lt;/h1&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Prometheus &amp;&amp; Nginx监控</title>
    <link href="https://sailernote.github.io/2019/03/15/Prometheus&amp;Nginx%E7%9B%91%E6%8E%A7/"/>
    <id>https://sailernote.github.io/2019/03/15/Prometheus&amp;Nginx监控/</id>
    <published>2019-03-15T06:31:34.039Z</published>
    <updated>2019-03-15T06:31:34.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prometheus-amp-Nginx监控"><a href="#Prometheus-amp-Nginx监控" class="headerlink" title="Prometheus&amp;Nginx监控"></a>Prometheus&amp;Nginx监控</h1><hr><p>监控的基本流程<br>process-log-formatlog-exporter-search&amp;parse-graphical<br>进程产生数据-&gt;数据格式化成可解析结构-&gt;采集器同步到查询工具或者解析工具-&gt;查询工具根据查询命令形成可打点的数据-&gt;打点数据进行数据展示</p><p>监控可以使用Prometheus普罗米西斯栈进行，日志的话还是使用ELK栈</p><hr><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>《Prometheus通过nginx-module-vts和nginx-vts-exporter监控Nginx性能》<br><a href="http://blog.leanote.com/post/stephen_yuan/Prometheus%E9%80%9A%E8%BF%87nginx-module-vts%E5%92%8Cnginx-vts-exporter%E7%9B%91%E6%8E%A7Nginx%E6%80%A7%E8%83%BD" target="_blank" rel="noopener">http://blog.leanote.com/post/stephen_yuan/Prometheus%E9%80%9A%E8%BF%87nginx-module-vts%E5%92%8Cnginx-vts-exporter%E7%9B%91%E6%8E%A7Nginx%E6%80%A7%E8%83%BD</a>    </p><p>《用Prometheus细化Nginx监控》<br><a href="https://yq.aliyun.com/articles/548175" target="_blank" rel="noopener">https://yq.aliyun.com/articles/548175</a></p><p>《Prometheus 监控整合 Nginx Metrics》<br><a href="https://yq.aliyun.com/articles/573597" target="_blank" rel="noopener">https://yq.aliyun.com/articles/573597</a></p><p>《linux系统下nginx安装目录和nginx.conf配置文件目录》<br><a href="https://blog.csdn.net/cn12306com/article/details/80643400" target="_blank" rel="noopener">https://blog.csdn.net/cn12306com/article/details/80643400</a></p><p>《Prometheus 实战》<br><a href="https://legacy.gitbook.com/book/songjiayang/prometheus/details" target="_blank" rel="noopener">https://legacy.gitbook.com/book/songjiayang/prometheus/details</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prometheus-amp-Nginx监控&quot;&gt;&lt;a href=&quot;#Prometheus-amp-Nginx监控&quot; class=&quot;headerlink&quot; title=&quot;Prometheus&amp;amp;Nginx监控&quot;&gt;&lt;/a&gt;Prometheus&amp;amp;Nginx
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sailernote.github.io/2019/03/15/hello-world/"/>
    <id>https://sailernote.github.io/2019/03/15/hello-world/</id>
    <published>2019-03-15T06:31:34.039Z</published>
    <updated>2019-03-15T06:31:34.040Z</updated>
    
    <content type="html"><![CDATA[<p>This is My Blog, Welcome.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is My Blog, Welcome.&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Install Nginx  with third package</title>
    <link href="https://sailernote.github.io/2019/03/15/Install%20Nginx%20%20with%20third%20package/"/>
    <id>https://sailernote.github.io/2019/03/15/Install Nginx  with third package/</id>
    <published>2019-03-15T06:31:34.038Z</published>
    <updated>2019-03-15T06:31:34.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Install-Nginx-with-third-package"><a href="#Install-Nginx-with-third-package" class="headerlink" title="Install Nginx  with third package"></a>Install Nginx  with third package</h1><hr><h3 id="compling"><a href="#compling" class="headerlink" title="compling"></a>compling</h3><p>Nginx 添加第三方包的时候需要重新编译流程相对繁琐<br><code>nginx -v</code> 显示 nginx 版本号<br><code>nginx -V</code> 显示 nginx 的版本，编译器版本和配置参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure arguments:&#123;... some package ...&#125;</span><br></pre></td></tr></table></figure></p><p>configure arguments 后面的参数就是需要在nginx编译时源码下的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx</span><br><span class="line">make clean</span><br><span class="line">./configure &#123;... some package --with-http_xxx_xxx --add-module=ngx_http_module --add-dynamic-module=ngx_http_module ...&#125;</span><br><span class="line">make</span><br></pre></td></tr></table></figure></p><p>如果不是第一次安装nginx，<code>make</code> 之后不要 <code>make install</code>， 不然会覆盖系统下nginx文件，<br>生成的二进制文件在目录 <code>./objs</code> 下<br>如果是静态编译(<code>add-module</code>)则在nginx.conf中只需要直接配置就可以，<br>如果是动态编译(<code>add-dynamic-module</code>)则在nginx.conf 则需要在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># nginx.conf</span><br><span class="line">load_module &quot;modules/ngx_http_xxxx_module.so&quot;;</span><br></pre></td></tr></table></figure></p><p><code>ngx_http_xxxx_module.so</code> 文件是在 <code>make</code> 后 <code>/objs</code> 目录下，而 <code>load_module</code> 的目录是 <code>/usr/lib/nginx/modules</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp &lt;path&gt;/objs/ngx_http_xxxx_module.so /usr/lib/nginx/modules/</span><br></pre></td></tr></table></figure></p><p>在nginx-1.9.x后的版本中加入了动态编译的feature，使用如下命令可以减少前面cp的步骤，下面操作完成了下载文件到<code>/usr/lib/nginx/modules</code>的过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nginx/stable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx-module-geoip</span><br></pre></td></tr></table></figure></p><hr><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>编译好文件后使用-t -c来测试配置文件语法错误，而不是直接<br><code>nginx -s reload</code> 或者 <code>service nginx restart</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p><p>查看当前使用的nginx是哪个<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps  -ef | grep nginx</span><br></pre></td></tr></table></figure></p><p>master process 后面的就是 nginx的目录。<br>查看当前使用的nginx配置文件是哪个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t                                              </span><br><span class="line">[sudo] password for current_user:                             </span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok                                                      </span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure></p><hr><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>Github vozlt/nginx-module-vts<br><a href="https://github.com/vozlt/nginx-module-vts/blob/master/config" target="_blank" rel="noopener">https://github.com/vozlt/nginx-module-vts/blob/master/config</a><br>尝试安装的三方包，用于监控nginx的模块    </p><p>《Compiling Third-Party Modules Into Nginx》<br><a href="https://serversforhackers.com/c/compiling-third-party-modules-into-nginx" target="_blank" rel="noopener">https://serversforhackers.com/c/compiling-third-party-modules-into-nginx</a></p><p>《nginx无痛升级并增加nginx-gridfs模块支持》<br><a href="https://blog.csdn.net/sasoritattoo/article/details/17270631" target="_blank" rel="noopener">https://blog.csdn.net/sasoritattoo/article/details/17270631</a><br>这里给出了一些常见的错误解决方法。</p><p>《How to enable dynamic module with an existing NGINX installation<br>》Stackoverflow<br><a href="https://stackoverflow.com/questions/36554405/how-to-enable-dynamic-module-with-an-existing-nginx-installation" target="_blank" rel="noopener">https://stackoverflow.com/questions/36554405/how-to-enable-dynamic-module-with-an-existing-nginx-installation</a></p><hr><p>EOF</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Install-Nginx-with-third-package&quot;&gt;&lt;a href=&quot;#Install-Nginx-with-third-package&quot; class=&quot;headerlink&quot; title=&quot;Install Nginx  with third pa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mongo数据备份</title>
    <link href="https://sailernote.github.io/2019/03/15/Mongo%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/"/>
    <id>https://sailernote.github.io/2019/03/15/Mongo数据备份/</id>
    <published>2019-03-15T06:31:34.038Z</published>
    <updated>2019-03-15T06:31:34.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mongo数据备份"><a href="#Mongo数据备份" class="headerlink" title="Mongo数据备份"></a>Mongo数据备份</h1><p>mongodb+rsync+crontab</p><h2 id="获取需要备份文件-mongodb"><a href="#获取需要备份文件-mongodb" class="headerlink" title="获取需要备份文件 mongodb"></a>获取需要备份文件 mongodb</h2><p>项目中需要备份的文件有两种，</p><ol><li>mongo的数据</li><li>docs下的excel和word文件</li></ol><p>mongo原生的三个命令可以从数据库中导出数据文件，导入数据文件，以及通过文件对数据库进行表级字段级操作。</p><p>（以下只涉及到备份预案）</p><p>常用的mongo数据库导出<br><code>mongodump -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -o 文件存在路径</code></p><p>不需要展开的文件目录，mongo提供了导出压缩文件的命令，每天备份一次，文件名使用日期-时间戳-数据库.archive的形式，–archive和-o不兼容，只能同时使用一个命令。<br>获取时间戳<br><code>HOD=$(date +%s)</code><br>获取yyyyMMdd格式日期<br><code>TODAY=$(date +%Y%m%d)</code><br>导出存档文件<br><code>mongodump -h &quot;$DB_HOST&quot;  --port &quot;$DB_PORT&quot; -d &quot;$DB_NAME&quot; --gzip  --archive=&quot;$ARCHIVE&quot;</code></p><h2 id="推送到备份服务器-rsync"><a href="#推送到备份服务器-rsync" class="headerlink" title="推送到备份服务器 rsync"></a>推送到备份服务器 rsync</h2><p>rsync具有ssh和daemon两种服务模式，两种又可以进行推||拉两种同步方式。（我个人直觉上比较喜欢资源服务器搭建好后，自由拉取。或者由一个中心服务器控制文件流动的，而不是资源服务器自动推。所以使用了daemon和pull的模式，因为拉取在备份服务器上运行脚本，是否成功获取也很容易通过一些脚本处理。）<br>daemon的主要配置在rsyncd.conf文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pid file = /var/run/rsyncd.pid # The process id file the daemon uses.</span><br><span class="line">lock file = /var/run/rsync.lock # The daemon lock file.</span><br><span class="line">log file = /var/log/rsync.log # The location of the log file.</span><br><span class="line">port = 12000</span><br><span class="line"></span><br><span class="line"># [files] This is the module name. </span><br><span class="line"># The name used here is what you’ll be putting in the rsync pull command as the first part of the source (/files/../..). </span><br><span class="line"># You can name it what you’d like and can have as many as you’d like.</span><br><span class="line">[files] </span><br><span class="line">path = /home/data/files # The file path for files associated with this module.</span><br><span class="line">comment = RSYNC FILES # Descriptive comment for this module.</span><br><span class="line">read only = no # This tells the daemon the directory for this module is read-only. You cannot upload to it. For upload only, use upload only = true.</span><br><span class="line">write only = no</span><br><span class="line">list = yes</span><br><span class="line"># 24标志c类网段</span><br><span class="line">hosts allow = ipaddr/24</span><br><span class="line">timeout = 300 # Time, in seconds, the rsync daemon will wait before terminating a dead conenction.</span><br><span class="line"></span><br><span class="line">[mongo]</span><br><span class="line">path = /home/data/mongo</span><br><span class="line">comment = MONGODB BACKUP</span><br><span class="line">read only = no</span><br><span class="line">write only = no</span><br><span class="line">list = yes</span><br><span class="line"># ipaddr like 127.0.0.1</span><br><span class="line">hosts allow = ipaddr/24 ipaddr/24</span><br><span class="line">timeout = 300</span><br><span class="line"></span><br><span class="line">[docs]</span><br><span class="line">path = /home/static/docs</span><br><span class="line">comment = DOCS BACKUP</span><br><span class="line">read only = no</span><br><span class="line">write only = no</span><br><span class="line">list = yes</span><br><span class="line">hosts allow = ipaddr/24 ipaddr/24</span><br><span class="line">timeout = 300</span><br></pre></td></tr></table></figure></p><p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync --daemon</span><br></pre></td></tr></table></figure></p><p>检查启动情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps x | grep rsync</span><br></pre></td></tr></table></figure></p><p>停止daemon<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill `cat /var/run/rsyncd.pid`</span><br></pre></td></tr></table></figure></p><p>通过xinetd守护进程</p><p>备份服务器拉取数据<br>查看rsync服务器中可以同步的目录列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -rdt rsync://IPADDR:RsyncPort/</span><br></pre></td></tr></table></figure></p><p>可以反复执行拿到下级目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -rdt rsync://IPADDR:RsyncPort/DirectoryName</span><br></pre></td></tr></table></figure></p><p>找到资源后 同步到目标路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -rdt rsync://IPADDR:RsyncPort/DirectoryName/File /DestinationDirectory/</span><br></pre></td></tr></table></figure></p><p>MacOS因为是NFS的数据格式，同步的时候需要使用 -O参数，SRC为资源路径 DEST为目标路径，-avu， -rdt同步中的细节调整，详看文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">RSYNC_SERVER=rsync://127.0.0.1:12000</span><br><span class="line">RSYNC_DIR=files</span><br><span class="line">RSYNC_SRC=&quot;$RSYNC_SERVER&quot;/&quot;$RSYNC_DIR&quot;</span><br><span class="line">RSYNC_DEST=&quot;/data/server_back&quot;</span><br><span class="line">sudo rsync -avu -O --progress &quot;$RSYNC_SRC&quot; &quot;$RSYNC_DEST&quot;</span><br></pre></td></tr></table></figure></p><h2 id="定时执行获取-amp-amp-推送操作-crontab"><a href="#定时执行获取-amp-amp-推送操作-crontab" class="headerlink" title="定时执行获取&amp;&amp;推送操作 crontab"></a>定时执行获取&amp;&amp;推送操作 crontab</h2><p>crontab是系统级的定时任务<br><code>crontab -e</code> 编辑定时任务<br><code>crontab -l</code> 查看定时任务列表<br>保存后系统就会按照crontab执行计划任务<br>crontab 除了执行shell外还行执行其他脚本<br><code>*/1 * * * * /usr/bin/python /root/images/color.py</code> 如可以执行python解释器来执行python脚本，改脚本为执行color.py/1 minute</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>Destination host unreachable <a href="https://blog.csdn.net/yzit0905/article/details/52748122" target="_blank" rel="noopener">https://blog.csdn.net/yzit0905/article/details/52748122</a></p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>知乎上关于mongodb backup的文章<br><a href="https://zhuanlan.zhihu.com/p/29809036" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29809036</a></p><p>github上自动备份mongo的脚本<br><a href="https://github.com/micahwedemeyer/automongobackup/blob/master/src/automongobackup.sh" target="_blank" rel="noopener">https://github.com/micahwedemeyer/automongobackup/blob/master/src/automongobackup.sh</a></p><p>mongodb压缩，过去需要额外执行压缩命令，3.2引入了–gzip<br><a href="https://www.cnblogs.com/xuliuzai/p/9594138.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuliuzai/p/9594138.html</a></p><p>mongo官方文章，存档与压缩<br><a href="https://www.mongodb.com/blog/post/archiving-and-compression-in-mongodb-tools" target="_blank" rel="noopener">https://www.mongodb.com/blog/post/archiving-and-compression-in-mongodb-tools</a></p><p>来自linux公社，rsync实现文件同步配置与使用<br><a href="https://www.linuxidc.com/Linux/2012-10/71704.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2012-10/71704.htm</a></p><p>来自linux公社，rsync实现文件同步配置排除故障<br><a href="https://www.linuxidc.com/Linux/2012-10/71705.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2012-10/71705.htm</a></p><p>! rsync 使用详解<br><a href="https://www.atlantic.net/hipaa-compliant-cloud-storage/how-to-setup-rsync-daemon-linux-server/" target="_blank" rel="noopener">https://www.atlantic.net/hipaa-compliant-cloud-storage/how-to-setup-rsync-daemon-linux-server/</a></p><p>rsync 使用详解 相当于上一片的中文版<br><a href="https://segmentfault.com/a/1190000000444614" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000444614</a><br>wiki关于xinted文章<br><a href="https://en.wikipedia.org/wiki/Xinetd" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Xinetd</a></p><p>20个crontab的用例,常见写法与基本命令<br><a href="https://www.jianshu.com/p/d93e2b177814" target="_blank" rel="noopener">https://www.jianshu.com/p/d93e2b177814</a></p><p>crontab语法辅助工具<br><a href="https://crontab.guru/#52_0-23_*_*_*" target="_blank" rel="noopener">https://crontab.guru/#52_0-23_*_*_*</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mongo数据备份&quot;&gt;&lt;a href=&quot;#Mongo数据备份&quot; class=&quot;headerlink&quot; title=&quot;Mongo数据备份&quot;&gt;&lt;/a&gt;Mongo数据备份&lt;/h1&gt;&lt;p&gt;mongodb+rsync+crontab&lt;/p&gt;
&lt;h2 id=&quot;获取需要备份文件
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>代码动态演示工具</title>
    <link href="https://sailernote.github.io/2018/11/08/%E4%BB%A3%E7%A0%81%E5%8A%A8%E6%80%81%E6%BC%94%E7%A4%BA%E5%B7%A5%E5%85%B7/"/>
    <id>https://sailernote.github.io/2018/11/08/代码动态演示工具/</id>
    <published>2018-11-08T03:28:41.000Z</published>
    <updated>2019-03-15T06:31:34.041Z</updated>
    
    <content type="html"><![CDATA[<p>代码动态演示工具，对命令行逐行表现力很好。<br><a href="https://glorious.codes/demo" target="_blank" rel="noopener">https://glorious.codes/demo</a></p><p>早一年我还很倾向使用样式结构简单的系统，因为可以照顾到性能低的设备和一些兼容性不好的浏览器。<br>但是后来看到华盛顿邮报等网站的图表后，开始反思，图表动画的信息量更大，具有文字不具有的表现力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码动态演示工具，对命令行逐行表现力很好。&lt;br&gt;&lt;a href=&quot;https://glorious.codes/demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://glorious.codes/demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;早一年我
      
    
    </summary>
    
    
  </entry>
  
</feed>
